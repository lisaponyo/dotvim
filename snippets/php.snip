snippet function
abbr func
	${1}function ${2:}(${3}) {
		${4:// code...}
	}

snippet php
	<?php
	${1}
	?>

snippet pe
	<?php echo ${1}; ?>

snippet echoh
	<?php echo htmlentities(${1}, ENT_QUOTES, 'utf-8') ?>${0}

snippet pfore
	<?$php foreach ($${1:variable} as $${2:key}${3: =>}): ?>
	${0}
	<?php endforeach ?>

snippet pife
	<?php if(${1:condition}): ?>
	${2}
	<?php else: ?>
	${0}
	<?php endif ?>

snippet pif
	<?php if(${1:condition}) { ?>
	${0}
	<?php } ?>

snippet pelse
	<?php else: ?>

snippet this
	<?php $this->${0} ?>

snippet ethis
	<?php echo $this->${0} ?>

snippet docc
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} \$${2};${0}

snippet docd
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1} ${2});${0}

snippet docs
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6}
	 **/
	${1}function ${2}(${3});${0}

snippet docf
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6}
	 **/
	${1}function ${2}(${3})
	{
		${0}
	}


snippet doch
	/**
	 * ${1}
	 *
	 * @author ${2}
	 * @version ${3}
	 * @copyright ${4}
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 **/

snippet doci
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4}
	 **/
	interface ${1}
	{
		${0}
	} // END interface ${1}

snippet c
	/**
	 * ${1}
	 */
	${2}function ${3}(${4}) {
		${5}
	}

snippet class
	/**
	 * ${1}
	 */
	class ${2:ClassName}${3:extends}}
	{
		$5
		function ${4:__construct}(${5:argument})
		{
			${0:# code...}
		}
	}

snippet def
	${1}defined('${2}')${0}


snippet do
	do {
		${0:# code...}
	} while (${1});

snippet if? 
	$${1:} = (${2:}) ? ${3:} : ${4:};

snippet ifelse
	if(${1:condition}) {
		${2:# code...}
	} else {
		${3:# code...}
	}
	${0}

snippet if
	if(${1:}) {
		${0:}
	}

snippet echo
	echo "${1:string}"${0};

snippet else
	else {
		${0:# code...}
	}

snippet elseif
	elseif (${1:condition}) {
		${0:# code...}
	}

snippet for
	for ($${1:i}=${2:0}; $${1:i} < ${3}; $${1:i}++) { 
		${0:# code...}
	}

snippet fore
	foreach($${1:} as $${2:}) {
		${0:}
	}

snippet func
	function ${1}(${2}) {
		${0}
	}

snippet con
	function __construct(${1})
	{
		${0}
	}

snippet here
	<<<${1:HTML}
	${2:content here}
	$1;

snippet inc
	include '${1:file}';${0}

snippet inco
	include_once '${1:file}';${0}

snippet array
	$${1:arrayName} = array('${2}' => ${3} ${0});

snippet req
	require '${1:file}';${0}

snippet reqo
	require_once '${1:file}';${0}

snippet ret
	return${1};${0}

snippet retf
	return false;

snippet rett
	return true;

snippet case
	case '${1:variable}':
		${0:# code...}
		break;

snippet switch
abbr sw
	switch (${1:variable}) {
	case '${2:value}':
		${3:# code...}
		break;
	${0}
	default:
		${4:# code...}
		break;
	}

snippet throw
	throw new ${1}Exception(${2:"${3:Error Processing Request}"}${4:});
	${0}

snippet while
abbr wh
	while (${1}) {
		${0:# code...}
	}

snippet gloabals
	\$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${0}

snippet cookie
	\$_COOKIE['${1:variable}']

snippet env
	\$_ENV['${1:variable}']

snippet files
	\$_FILES['${1:variable}']

snippet get
	\$_GET['${1:variable}']

snippet post
	\$_POST['${1:variable}']

snippet request
	\$_REQUEST['${1:variable}']

snippet server
	\$_SERVER['${1:variable}']

snippet session
	\$_SESSION['${1:variable}']

snippet var
	var_dump(${1:});

snippet pre
	echo "<pre style='text-align:left;'>";
	var_dump(${1});
	echo "</pre>";

snippet set
	$this->set('${1}', ${2});

snippet ar
	'${1}' => ${2},${3}

snippet arr
	array(${1})

snippet log
	$this->log(${1}, LOG_DEBUG);

snippet out
	$this->out(${1});

snippet sf_filelog
	/**
	 * Output var_dump to file
	 *
	 * @param    String   $str  Output string.
	 * @param    String   $kind Target log title.
	 */
	function filelog($str, $kind = "") {
		$dir  = ${0:"~/log/"};
		$date = date('Ymd');
		$file = $dir.$date.".log";
		touch($file);
		if(is_file($file)) {
			ob_start();
			if(!empty($kind)) echo "[".$kind."]\n";
			var_dump($str);
			$out=ob_get_contents();
			ob_end_clean();
			file_put_contents($file,$out,FILE_APPEND);
		}
	}

snippet sf_set
	function _set($properties = array()) {
		if (is_array($properties) && !empty($properties)) {
			foreach ($properties as $key => $val) {
				if (array_key_exists($key, $vars)) {
					$this->{$key} = $val;
				}
			}
		}
	}

snippet sf_sendRequest
	/**
	 * send POST or GET request easily.
	 *
	 * @param    String   $method   GET or POST
	 * @param    String   $url      Target url.
	 * @param    Array    $params   e.g. Array("postdata" => "hoge")
	 */
	function sendRequest($method, $url, $params) {
		$data = http_build_query($params);
		$header = Array("Content-Type: application/x-www-form-urlencoded");
		$options = array('http' => Array(
			'method' => $method,
			'header'  => implode("\r\n", $header),
		));
		if($method == 'GET') {
			$content = file_get_contents($url . '?' . $data, false, stream_context_create($options));
		} else if($method == 'POST') {
			$options['content'] = $data;
			$content = file_get_contents($url, false, stream_context_create($options));
		}
		return $content;
	}

snippet data
	$this->data['${1}']['${0}']

snippet js
	<script type="text/javascript" charset="utf-8">
	${0}
	</script>

snippet css
	<style TYPE="text/css">
	<!--
	${0}
	-->
	</style>

snippet todo
	// TODO tyamazaki 

snippet input
	$form->input('${0}')

snippet link
	$html->link('${1}', array('controller' => '${2}', 'action' => '${0}'))

snippet img
	$html->image('${1}', array('alt' => '${0}'))
